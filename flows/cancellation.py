from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler, CallbackQueryHandler, MessageHandler, filters
)
from shared.cancel import cancel_handler
from shared.main_menu import show_main_menu
from shared.notifications import notify_admins
from db.context import db_session
from db_setup import Participation, Event
from utils.formatting import ru_date_string
from datetime import datetime
from sqlalchemy.orm import joinedload

CHOOSING_CANCEL = 100

async def show_cancel_participation_menu(update, context):
    username = update.effective_user.username
    if not username:
        await update.message.reply_text("–£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—á–∞—Å—Ç–∏—è.")
        await show_main_menu(update, context)
        return ConversationHandler.END
    today = datetime.today().date()
    with db_session() as session:
        parts = (
            session.query(Participation)
            .options(joinedload(Participation.event), joinedload(Participation.role))
            .join(Event)
            .filter(
                Participation.username == username,
                Event.date >= today
            )
            .order_by(Event.date, Event.slot)
            .all()
        )
    if not parts:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await show_main_menu(update, context)
        return ConversationHandler.END
    keyboard = []
    for p in parts:
        event = p.event
        role = p.role.name if p.role else "–ë–µ–∑ —Ä–æ–ª–∏"
        btn_text = (
            f"{ru_date_string(event.date)}, {event.time} ‚Äî {role}"
        )
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"cancelpart|{p.id}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancelall")])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã, –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤—Å–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_CANCEL

async def cancel_participation(update, context):
    if update.callback_query.data == "cancel":
        return await cancel_handler(update, context)
    username = update.effective_user.username
    today = datetime.today().date()
    if update.callback_query.data == "cancelall":
        notify_msgs = []
        with db_session() as session:
            canceled_parts = (
                session.query(Participation)
                .join(Event)
                .filter(
                    Participation.username == username,
                    Event.date >= today
                )
                .all()
            )
            for p in canceled_parts:
                event = p.event
                role = p.role.name if p.role else "–ë–µ–∑ —Ä–æ–ª–∏"
                notify_msgs.append(
                    f"üî¥ @{username} –æ—Ç–º–µ–Ω–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏:\n"
                    f"{ru_date_string(event.date)}, {event.time}\n"
                    f"–†–æ–ª—å: {role}"
                )
            for p in canceled_parts:
                session.delete(p)
            session.commit()
        # Optionally, notify admins (implement if needed)
        for msg in notify_msgs:
            await notify_admins(context, msg)
        await update.callback_query.edit_message_text("–í—Å–µ –≤–∞—à–∏ —É—á–∞—Å—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        await show_main_menu(update, context)
        return ConversationHandler.END
    else:
        _, part_id = update.callback_query.data.split("|")
        with db_session() as session:
            part = session.query(Participation).filter_by(id=int(part_id)).first()
            if not part:
                await update.callback_query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await show_main_menu(update, context)
                return ConversationHandler.END
            event = part.event
            role = part.role.name if part.role else "–ë–µ–∑ —Ä–æ–ª–∏"
            text = (f"üî¥ @{username} –æ—Ç–º–µ–Ω–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏:\n"
                    f"{ru_date_string(event.date)}, {event.time}\n"
                    f"–†–æ–ª—å: {role}")
            session.delete(part)
            session.commit()
        # Optionally, notify admins (implement if needed)
        await notify_admins(context, text)
        await update.callback_query.edit_message_text("–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await show_main_menu(update, context)
        return ConversationHandler.END

cancel_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ$"), show_cancel_participation_menu)],
    states={
        CHOOSING_CANCEL: [
            CallbackQueryHandler(cancel_participation, pattern=r"^(cancelpart\||cancelall$)"),
            CallbackQueryHandler(cancel_handler, pattern="^cancel$")
        ],
    },
    fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel_handler)],
)