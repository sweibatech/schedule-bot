from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler, CallbackQueryHandler, MessageHandler, filters
)
from shared.cancel import cancel_handler
from shared.main_menu import show_main_menu
from shared.notifications import notify_admins
from service.schedule_service import ensure_week_events, get_week_schedule, week_dates
from utils.formatting import build_schedule_text, ru_date_string, get_slot_label
from db.context import db_session
from db.queries import get_event_by_id
from db_setup import Participation

CHOOSING_DAY, CHOOSING_EVENT, CHOOSING_ROLE = range(3)

async def schedule_handler(update, context):
    ensure_week_events()
    event_dtos = get_week_schedule()
    text = build_schedule_text(event_dtos, markdown=False)
    await update.message.reply_text(text)
    await show_main_menu(update, context)

async def participate_handler(update, context):
    ensure_week_events()
    event_dtos = get_week_schedule()
    schedule = {e.date: {} for e in event_dtos}
    for event in event_dtos:
        schedule[event.date][event.slot] = event
    keyboard = []
    for date in week_dates():
        events_today = [schedule.get(date.isoformat(), {}).get(slot) for slot in ["morning", "evening"] if schedule.get(date.isoformat(), {}).get(slot)]
        if events_today:
            date_str = ru_date_string(date.isoformat())
            keyboard.append([InlineKeyboardButton(date_str, callback_data=f"chooseday|{date.isoformat()}")])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    if len(keyboard) == 1:  # Only cancel button present
        await update.message.reply_text(
            "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await show_main_menu(update, context)
        return ConversationHandler.END
    context.user_data["schedule"] = schedule
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É—á–∞—Å—Ç–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return CHOOSING_DAY

async def choose_day(update, context):
    if update.callback_query.data == "cancel":
        return await cancel_handler(update, context)
    _, day_iso = update.callback_query.data.split("|")
    chosen_date = day_iso
    context.user_data["chosen_date"] = chosen_date
    schedule = context.user_data["schedule"]
    keyboard = []
    for slot in ["morning", "evening"]:
        event = schedule.get(chosen_date, {}).get(slot)
        if event:
            btn_text = get_slot_label(slot, event.time)  # e.g. "–£—Ç—Ä–æ (08:00)"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"chooseevent|{event.id}")])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    if len(keyboard) == 1:
        await update.callback_query.edit_message_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.", reply_markup=InlineKeyboardMarkup(keyboard))
        await show_main_menu(update, context)
        return ConversationHandler.END
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return CHOOSING_EVENT

async def choose_event(update, context):
    if update.callback_query.data == "cancel":
        return await cancel_handler(update, context)
    _, event_id = update.callback_query.data.split("|")
    context.user_data["chosen_event_id"] = int(event_id)
    with db_session() as session:
        event = get_event_by_id(session, int(event_id))
    if not event:
        await update.callback_query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await show_main_menu(update, context)
        return ConversationHandler.END
    roles = event.roles
    if not roles:
        await update.callback_query.answer("–í —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏ –Ω–µ—Ç —Ä–æ–ª–µ–π.")
        await show_main_menu(update, context)
        return ConversationHandler.END
    keyboard = [
        [InlineKeyboardButton(role.name, callback_data=f"chooserole|{role.id}")]
        for role in roles
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_ROLE

async def choose_role(update, context):
    if update.callback_query.data == "cancel":
        return await cancel_handler(update, context)
    _, role_id = update.callback_query.data.split("|")
    username = update.effective_user.username
    if not username:
        await update.callback_query.edit_message_text(
            "–£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è —É—á–∞—Å—Ç–∏—è."
        )
        await show_main_menu(update, context)
        return ConversationHandler.END
    event_id = context.user_data["chosen_event_id"]
    with db_session() as session:
        already = (
            session.query(Participation)
            .filter_by(event_id=event_id, role_id=int(role_id), username=username)
            .first()
        )
        if already:
            await update.callback_query.edit_message_text(
                "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ä–æ–ª—å –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏."
            )
            await show_main_menu(update, context)
            return ConversationHandler.END
        participation = Participation(
            username=username, event_id=event_id, role_id=int(role_id)
        )
        session.add(participation)
        session.commit()
        from db.queries import get_event_by_id as get_event_dto_by_id
        event = get_event_dto_by_id(session, event_id)
        role = next((r for r in event.roles if r.id == int(role_id)), None)
    text = (f"üü¢ @{username} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ:\n"
            f"{ru_date_string(event.date)}, {event.time}\n"
            f"–†–æ–ª—å: {role.name if role else '–ë–µ–∑ —Ä–æ–ª–∏'}")
    await notify_admins(context, text)
    await update.callback_query.edit_message_text(
        "–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–æ–±—ã—Ç–∏–µ. –°–ø–∞—Å–∏–±–æ!\n\n–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:"
    )
    await show_main_menu(update, context)
    return ConversationHandler.END

participate_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å$"), participate_handler)
    ],
    states={
        CHOOSING_DAY: [
            CallbackQueryHandler(choose_day, pattern=r"^chooseday"),
            CallbackQueryHandler(cancel_handler, pattern="^cancel$")
        ],
        CHOOSING_EVENT: [
            CallbackQueryHandler(choose_event, pattern=r"^chooseevent"),
            CallbackQueryHandler(cancel_handler, pattern="^cancel$")
        ],
        CHOOSING_ROLE: [
            CallbackQueryHandler(choose_role, pattern=r"^chooserole"),
            CallbackQueryHandler(cancel_handler, pattern="^cancel$")
        ],
    },
    fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel_handler)],
)